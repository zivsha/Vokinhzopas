//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using UnityEngine;
using Leap;
using System.Collections;
using System.Collections.Generic;

namespace AssemblyCSharp
{
	public static class Tools
	{
		public static Vector3 leapVectorToWorld(Leap.Vector leapPoint, InteractionBox iBox)
		{
			Leap.Vector normalized = iBox.NormalizePoint(leapPoint, false);
			var v1 = new Vector3 (UnityEngine.Screen.width / 2, UnityEngine.Screen.height / 2, Camera.main.nearClipPlane);
			Vector3 v = Camera.main.ScreenToWorldPoint(v1);
			normalized += new Leap.Vector (v.x, v.y, v.z); //recenter origin
			return new Vector3 (normalized.x, normalized.y, normalized.z);
		}

		public static Vector convert(Vector3 position, IDictionary<string, Vector3> LeapScale, IDictionary<string, Vector3> AppScale)
		{
			var currentRange = LeapScale["end"] - LeapScale["start"];
			var targetRange  = AppScale["end"]  - AppScale["start"]; 

			var result = new Vector();
			result.x = (position.x - LeapScale["start"].x) * targetRange.x/currentRange.x + AppScale["start"].x;
			result.y = (position.y - LeapScale["start"].y) * targetRange.y/currentRange.y + AppScale["start"].y;
			result.z = (position.z - LeapScale["start"].z) * targetRange.z/currentRange.z + AppScale["start"].z;

			if(result.x < AppScale["start"].x){result.x = AppScale["start"].x;}
			if(result.x > AppScale["end"].x)  {result.x = AppScale["end"].x;}
			if(result.y > AppScale["start"].y){result.y = AppScale["start"].y;}
			if(result.y < AppScale["end"].y)  {result.y = AppScale["end"].y;}
			if(result.z > AppScale["start"].z){result.z = AppScale["start"].z;}
			if(result.z < AppScale["end"].z)  {result.z = AppScale["end"].z;}	

			return result;
		}

		/*
		 * 			         -,--,--,--,--,--,--,--,--,--,--,--
		 *	piano --->      /  /  /  /  /  /  /  /  /  /  /  /
		 *			        ---------------------------------
		 *  palm x     :  -3.5                                6
		 *  HandCtrl x :  -2.5                                5.7
		 *  Camera x   :  -1.5                                4.75
		 * 
		 */
		public enum Direction{Left, Right}

		public static float CameraLeftBorder 				= -1.5f;
		public static float CameraRightBorder 				= 4.75f;
		public static float CameraShiftStep 				= 1f;

		public static float HandControllerLeftBorder 		= -2.5f;
		public static float HandControllerRightBorder 		= 6f;
		public static float HandControllerShiftStep 		= 0.5f;

		public static float PalmLeftBorder 					= -3.5f;
		public static float PalmRightBorder 				= 5.7f;
		public static float PalmBorderShiftStep				 = 0.5f;
	
		public static void ShiftView (Direction direction)
		{
			if(direction == Direction.Left)
			{
				if(Camera.main.transform.position.x < CameraLeftBorder) 
					return;
				
				Main.CameraTargetPos.x -= CameraShiftStep;
				HandController.HandTargetPosition.x -= HandController.HandTargetPosition.x <= HandControllerLeftBorder ? 0 : HandControllerShiftStep;
				HandController.LeftBorder -= HandController.LeftBorder <= PalmLeftBorder ? 0 : PalmBorderShiftStep;
				HandController.RightBorder -= HandController.LeftBorder <= PalmLeftBorder ? 0 : PalmBorderShiftStep;
			}
			else if(direction == Direction.Right)
			{
				if(Camera.main.transform.position.x > CameraRightBorder) 
					return;

				Main.CameraTargetPos.x += CameraShiftStep;
				HandController.HandTargetPosition.x += HandController.HandTargetPosition.x >= HandControllerRightBorder ? 0 : HandControllerShiftStep;
				HandController.LeftBorder += HandController.RightBorder >= PalmRightBorder ? 0 : PalmBorderShiftStep;
				HandController.RightBorder += HandController.RightBorder >= PalmRightBorder ? 0 : PalmBorderShiftStep;
			}
			//PrintDebug ();
		}

		static void PrintDebug ()
		{
			Debug.Log ("+++++++++++++ Positions ++++++++++++++");
			Debug.Log ("LeftBorder Position: " + HandController.LeftBorder + "   RightBorder Position: " + HandController.RightBorder);
			Debug.Log ("HandController position: " + HandController.HandTargetPosition);
			Debug.Log ("Camera. position: " + Camera.main.transform.position);
			Debug.Log ("++++++++++++++++++++++++++++++++++++++/n/n");
		}
	}
}

